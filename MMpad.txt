

we have a volumetric line that can animate toward a preset location.

We want a volumetric line that can animate toward a dynamic location.


1	Make a list of points.
1.5		make an algorithm for generating points
1.75			make algorithm for balancing relative point locations.
2	use your algorithm for lerping between those points.
2.5		method for lerping. at end of lerp, take next point.
------------------

do phase 4.


-----phase 4---------------
multiply by 8 in 8 symmetrical directions.
	add 4 lerp processes in entire script.



----phase 5--------
curves. Presently, all the curvePoints are very close together. This prevents any curving to occur.
	As curving comes from gradual changes in the line as it's placed, in order to create a curve, we will have to know the
	location of every point before we apply the curve. Then we will have to apply the curve transformation(somehow) and finally
	we will have to instantiate each point one at a time.
		This is a particularly costly way to accomplish curves with the package you are using. The package makes curves by using children of 
		the main lineRenderer as guiding points. An algorithm within the package creates a smaller set of points between the guiding points in
		order to form curves. The approach mentioned above would double the size of data stored. For every child, there will be a curved point.

	There has to be a way to use the package's algorithm to my advantage.


-----phase 6---------------
Make Everything Modular.
Optimize everything.





There may be an offset error in counter. Trace it though.







Now I've got a list of points.

Write/extracate an algorithm for lerping between two points at a time. Then, make it take the next point. It will have to run in update.




Checklist:



